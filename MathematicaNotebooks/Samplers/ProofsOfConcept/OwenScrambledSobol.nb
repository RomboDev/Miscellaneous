(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     25901,        669]
NotebookOptionsPosition[     24992,        648]
NotebookOutlinePosition[     25338,        663]
CellTagsIndexPosition[     25295,        660]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "\n",
 StyleBox["THIS IS A PROOF OF CONCEPT SO IT IS NOT MEANT TO BE USED TO \
ACTUALLY HEAVY EVALUATE THE SAMPLER BUT TO PROTOTYPE IT EXTEND IT AND MODEL \
IT ..\nUSE THE C/C++ COMPILED STUFF FOR HEAVY EVAL AS IT WILL RETURN EXACTLY \
THE SAME NUMBERS AS THIS VERY ONE BUT IT\[CloseCurlyQuote]S ORDER OF \
MAGNITUDE FASTER.",
  FontSize->12,
  FontColor->GrayLevel[0.5]],
 StyleBox["\n",
  FontColor->RGBColor[1, 0.5, 0.5]]
}], "Text",
 CellChangeTimes->{{3.8154016386003428`*^9, 3.815401668076709*^9}, 
   3.815483508777999*^9, 
   3.815483585084269*^9},ExpressionUUID->"1e67ac40-a8f0-470e-8ee6-\
9683dc9f836b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"aux", ":", " ", 
    RowBox[{"type", " ", "punning"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"signedToUnsigned", "[", 
      RowBox[{"x_", ",", " ", 
       RowBox[{"b_:", "32"}]}], "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"val", "=", "x"}], ",", " ", 
         RowBox[{"bits", "=", "b"}]}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Negative", "[", "val", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"nd", "=", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{"val", ",", "2"}], "]"}]}], ";", 
          "                                                  ", 
          RowBox[{"(*", " ", 
           RowBox[{"truncate", " ", "extra", " ", "digits"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "nd", "]"}], ">", "bits"}], ",", 
            RowBox[{"val", "=", 
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"nd", ",", 
                 RowBox[{"-", "bits"}]}], "]"}], ",", "2"}], "]"}]}], ",", 
            "val"}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"val", "=", 
           RowBox[{"Abs", "[", "val", "]"}]}], ";", 
          "                                                                   \
         ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"1", "'"}], "s", " ", "complement"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"BitXor", "[", 
            RowBox[{"val", ",", 
             RowBox[{"FromDigits", "[", " ", 
              RowBox[{
               RowBox[{"ConstantArray", "[", 
                RowBox[{"1", ",", "bits"}], "]"}], ",", "2"}], "]"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"n", "+=", "1"}]}], ",", 
         "                                                                    \
                         ", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"2", "'"}], "s", " ", "complement"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"else", ",", " ", 
           RowBox[{"nothing", " ", "to", " ", "do"}], ",", " ", 
           RowBox[{
           "just", " ", "truncate", " ", "it", " ", "to", " ", "spec", " ", 
            "bits"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"nd", "=", 
           RowBox[{"IntegerDigits", "[", 
            RowBox[{"val", ",", "2"}], "]"}]}], ";", 
          "                                                  ", 
          RowBox[{"(*", " ", 
           RowBox[{"truncate", " ", "extra", " ", "digits"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "nd", "]"}], ">", "bits"}], ",", 
            RowBox[{"val", "=", 
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"nd", ",", 
                 RowBox[{"-", "bits"}]}], "]"}], ",", "2"}], "]"}]}], ",", 
            "val"}], "]"}], ";", "\[IndentingNewLine]", "val"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"realToInt32", "[", "x_", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"xx", "=", "x"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"realbits", "=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"xx", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "realbits", "]"}], ">", "32"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"int32bits", "=", 
            RowBox[{"Take", "[", 
             RowBox[{"realbits", ",", 
              RowBox[{"-", "32"}]}], "]"}]}], ";", "  ", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{"take", " ", "last", " ", "32", " ", "slots"}], ",", " ", 
             RowBox[{"aka", " ", "first", " ", "for", " ", "32", "bits"}]}], 
            " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"int32", "=", 
            RowBox[{"FromDigits", "[", 
             RowBox[{"int32bits", ",", "2"}], "]"}]}], ";", 
           "\[IndentingNewLine]", "int32"}], ",", " ", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", "xx"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"convert", " ", "samples", " ", "from", " ", "0"}], "-", 
     RowBox[{"1", " ", "to"}], " ", "-", "1", "-", 
     RowBox[{"+", "1"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"convertSample", "[", "kx_", "]"}], "=", 
     RowBox[{
      RowBox[{"2.0", "*", "kx"}], "-", "1.0"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.814965490384536*^9, 
  3.8149654934653997`*^9}},ExpressionUUID->"72d44931-b896-4ff6-afc7-\
ad069e98c5d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "Owen"}], " ", "Scrambled", " ", 
    RowBox[{"Sobol", " ", "--"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Clear", "[", 
    RowBox[{
    "ossC0", ",", "ossC1", ",", "ossC2", ",", "ossC3", ",", "ossC4", ",", 
     "ossC5", ",", "ossC6", ",", "ossC7"}], "]"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ossC0", "=", 
     RowBox[{"signedToUnsigned", "[", "0", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC1", "=", 
     RowBox[{"signedToUnsigned", "[", "1", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC2", "=", 
     RowBox[{"signedToUnsigned", "[", 
      RowBox[{
       RowBox[{"Interpreter", "[", "\"\<HexInteger\>\"", "]"}], "[", 
       "\"\<80000000\>\"", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC3", "=", 
     RowBox[{"signedToUnsigned", "[", "1664525", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC4", "=", 
     RowBox[{"signedToUnsigned", "[", "1013904223", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC5", "=", 
     RowBox[{"signedToUnsigned", "[", "1103515245", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC6", "=", 
     RowBox[{"signedToUnsigned", "[", "12345", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC7", "=", 
     RowBox[{"signedToUnsigned", "[", "31", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ossC8", "=", 
     RowBox[{"signedToUnsigned", "[", 
      RowBox[{
       RowBox[{"Interpreter", "[", "\"\<HexInteger\>\"", "]"}], "[", 
       "\"\<ffffffff\>\"", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"lcG1", "[", "kn_Integer", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", "=", 
         RowBox[{"signedToUnsigned", "[", "kn", "]"}]}], "}"}], ",", 
       RowBox[{"signedToUnsigned", "[", 
        RowBox[{
         RowBox[{"n", "*", "ossC3"}], "+", "ossC4"}], "]"}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"lcG2", "[", "kn_Integer", "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"n", "=", 
         RowBox[{"signedToUnsigned", "[", "kn", "]"}]}], "}"}], ",", 
       RowBox[{"signedToUnsigned", "[", 
        RowBox[{
         RowBox[{"n", "*", "ossC5"}], "+", "ossC6"}], "]"}]}], "]"}]}], ";"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sobolS", "[", "kn_Integer", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", "=", 
        RowBox[{"signedToUnsigned", "[", "kn", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"px", "=", "ossC0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"py", "=", "ossC0"}], ";", "\[IndentingNewLine]", 
       RowBox[{"dx", "=", "ossC2"}], ";", "\[IndentingNewLine]", 
       RowBox[{"dy", "=", "ossC2"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"n", "\[NotEqual]", "ossC0"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"cc", "=", 
           RowBox[{"BitAnd", "[", 
            RowBox[{"n", ",", "ossC1"}], "]"}]}], ";", "\[IndentingNewLine]", 
          
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"BitAnd", "[", 
              RowBox[{"n", ",", "ossC1"}], "]"}], "\[NotEqual]", "ossC0"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"px", "=", 
              RowBox[{"BitXor", "[", 
               RowBox[{"px", ",", "dx"}], "]"}]}], ";", 
             RowBox[{"py", "=", 
              RowBox[{"BitXor", "[", 
               RowBox[{"py", ",", "dy"}], "]"}]}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"dx", "=", 
           RowBox[{"BitShiftRight", "[", 
            RowBox[{"dx", ",", "ossC1"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"dy", "=", 
           RowBox[{"BitXor", "[", 
            RowBox[{"dy", ",", 
             RowBox[{"BitShiftRight", "[", 
              RowBox[{"dy", ",", "ossC1"}], "]"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"n", "=", 
           RowBox[{"BitShiftRight", "[", 
            RowBox[{"n", ",", "ossC1"}], "]"}]}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"px", ",", "py"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"owenScramble", "[", 
     RowBox[{"kp_Integer", ",", " ", "ks_Integer"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "=", 
         RowBox[{"signedToUnsigned", "[", "kp", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        "                                                                     \
                               ", 
        RowBox[{"s", "=", 
         RowBox[{"signedToUnsigned", "[", "ks", "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"s", "=", 
        RowBox[{"lcG2", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"For", "[", 
        RowBox[{
         RowBox[{"i", "=", 
          RowBox[{"BitShiftLeft", "[", 
           RowBox[{"ossC1", ",", "ossC7"}], "]"}]}], ",", 
         RowBox[{"i", ">", "ossC0"}], ",", 
         RowBox[{"i", "=", 
          RowBox[{"BitShiftRight", "[", 
           RowBox[{"i", ",", "ossC1"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"s", ">", "ossC2"}], ",", 
            RowBox[{"p", "=", 
             RowBox[{"BitXor", "[", 
              RowBox[{"p", ",", "i"}], "]"}]}]}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"BitAnd", "[", 
              RowBox[{"p", ",", "i"}], "]"}], "\[Equal]", "ossC0"}], ",", 
            RowBox[{"s", "=", 
             RowBox[{"lcG1", "[", "s", "]"}]}], ",", 
            RowBox[{"s", "=", 
             RowBox[{"lcG2", "[", "s", "]"}]}]}], "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", "p"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"owenScrambledSobol", "[", "kidx_Integer", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"idx", "=", "kidx"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ss", "=", 
        RowBox[{"sobolS", "[", "idx", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"s1", "=", 
        RowBox[{
         RowBox[{"owenScramble", "[", 
          RowBox[{
           RowBox[{"ss", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "42"}], "]"}], "/", 
         "ossC8"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"s2", "=", 
        RowBox[{
         RowBox[{"owenScramble", "[", 
          RowBox[{
           RowBox[{"ss", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", "666"}], "]"}], "/", 
         "ossC8"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"s1", ",", "s2"}], "}"}], "//", "N"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"owenScrambledSobol1D", "[", "kidx_Integer", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"idx", "=", "kidx"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ss", "=", 
        RowBox[{"sobolS", "[", "idx", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"s1", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"owenScramble", "[", 
           RowBox[{
            RowBox[{"ss", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", "42"}], "]"}], "/", 
          "ossC8"}], "//", "N"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"wangHash", "[", "kx_Integer", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"x", "=", 
        RowBox[{"signedToUnsigned", "[", "kx", "]"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"x", "=", 
        RowBox[{"BitXor", "[", 
         RowBox[{
          RowBox[{"BitXor", "[", 
           RowBox[{"x", ",", "61"}], "]"}], ",", 
          RowBox[{"BitShiftRight", "[", 
           RowBox[{"x", ",", "16"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"x", "*=", "9"}], ";", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"BitXor", "[", 
         RowBox[{"x", ",", 
          RowBox[{"BitShiftRight", "[", 
           RowBox[{"x", ",", "4"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"signedToUnsigned", "[", 
         RowBox[{"x", "*", 
          RowBox[{
           RowBox[{"Interpreter", "[", "\"\<HexInteger\>\"", "]"}], "[", 
           "\"\<27d4eb2d\>\"", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"x", "=", 
        RowBox[{"BitXor", "[", 
         RowBox[{"x", ",", 
          RowBox[{"BitShiftRight", "[", 
           RowBox[{"x", ",", "15"}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "x"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"owenScrambledSobol1DH", "[", "kidx_Integer", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"idx", "=", "kidx"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"idx", "=", 
        RowBox[{"wangHash", "[", "idx", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ss", "=", 
        RowBox[{"sobolS", "[", "idx", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"s1", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"owenScramble", "[", 
           RowBox[{
            RowBox[{"ss", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", "42"}], "]"}], "/", 
          "ossC8"}], "//", "N"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"owenScrambledSobol", "[", "123", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.797188269686551*^9, 3.797188271600317*^9}, {
  3.814962393506811*^9, 3.814962431530014*^9}, {3.814964187564169*^9, 
  3.814964189343466*^9}, {3.814964224013444*^9, 3.814964224339044*^9}, {
  3.814965497541791*^9, 3.81496550044086*^9}, {3.815137241191437*^9, 
  3.815137296676528*^9}, {3.815500599191526*^9, 
  3.8155006027902517`*^9}},ExpressionUUID->"42b7d93c-3f71-4fbd-ab13-\
61b9eeeaffd7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.17959372656876074`", ",", "0.2315837073213383`"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.797080397835272*^9, 3.797080436243989*^9, 3.797080547844857*^9, 
   3.797080822551437*^9, 3.797184197781382*^9, 3.797185813952611*^9, 
   3.797188158351288*^9, 3.800720069533141*^9, 3.800720785375195*^9, 
   3.8149623035774393`*^9, {3.8149641961117268`*^9, 3.8149642249997272`*^9}, 
   3.814965556072995*^9, 3.8151369133757143`*^9, 3.815136954510335*^9, {
   3.815137298062415*^9, 3.81513730099409*^9}, 3.8151373344114122`*^9, 
   3.81548911414307*^9, {3.815500604866025*^9, 3.8155006078365097`*^9}, 
   3.815501573794222*^9},ExpressionUUID->"fe1deee9-b286-423c-9fb2-\
088bbeef36fc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"data", ",", "inside", ",", "insidepts"}], "}"}], ",", 
      RowBox[{
       RowBox[{"SeedRandom", "[", "n", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"data", "=", 
          RowBox[{"RandomReal", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"m", ",", "2"}], "}"}]}], "]"}]}], ";"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"rdata", "=", 
        RowBox[{"ParallelArray", "[", 
         RowBox[{"owenScrambledSobol", ",", "m"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"data", "=", 
        RowBox[{"Map", "[", 
         RowBox[{"convertSample", ",", "rdata"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"insidepts", "=", 
        RowBox[{"Cases", "[", 
         RowBox[{"data", ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x_", ",", "y_"}], "}"}], "/;", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "^", "2"}], "+", 
             RowBox[{"y", "^", "2"}]}], "<", "1"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"inside", "=", 
        RowBox[{"Length", "[", "insidepts", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Text", "@", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"Column", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Graphics", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"PointSize", "[", "0.006", "]"}], ",", 
                 RowBox[{"RGBColor", "[", 
                  RowBox[{"0.93", ",", "0.24", ",", "0.29"}], "]"}], ",", 
                 RowBox[{"Disk", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", "1"}], "]"}], ",", 
                 "Black", ",", 
                 RowBox[{"Point", "[", "data", "]"}]}], "}"}], ",", 
               RowBox[{"ImageSize", "\[Rule]", 
                RowBox[{"If", "[", 
                 RowBox[{"format", ",", "500", ",", "350"}], "]"}]}]}], "]"}],
              ",", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<inside: \>\"", ",", "inside", ",", "\"\<\\toutside: \>\"",
                 ",", 
                RowBox[{"m", "-", "inside"}], ",", "\"\<\\ttotal:  \>\"", ",",
                 "m"}], "}"}], "]"}], ",", 
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<\[Pi] \[TildeTilde] 4 \[Times] \>\"", ",", "inside", ",", 
                "\"\</\>\"", ",", "m", ",", "\"\< = \>\"", ",", 
                RowBox[{"4.", " ", 
                 RowBox[{"inside", "/", "m"}]}]}], "}"}], "]"}]}], "}"}], 
           "]"}], ",", "\"\<Label\>\""}], "]"}]}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", "1", ",", "\"\<random seed\>\""}], "}"}], ",", "1", 
      ",", "1000", ",", "1"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "1", ",", "\"\<sample size\>\""}], "}"}], ",", "64", 
      ",", "8192", ",", "64", ",", 
      RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"format", ",", "False", ",", "\"\<large format\>\""}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
    RowBox[{"AutorunSequencing", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}]}], "]"}], "\[IndentingNewLine]", 
  "*)"}]], "Input",
 CellChangeTimes->{
  3.797080431262053*^9, {3.7971881763081512`*^9, 3.797188187822085*^9}, {
   3.800720182024045*^9, 3.800720204513414*^9}, {3.814965441381463*^9, 
   3.81496544635254*^9}, {3.815136905940671*^9, 3.815136907874422*^9}, {
   3.815136940638647*^9, 3.815136944010559*^9}, {3.815489117751945*^9, 
   3.815489119474792*^9}, {3.815489151537575*^9, 
   3.8154891538830643`*^9}},ExpressionUUID->"7100e3b9-24cb-4978-8418-\
e11b3c5cb0eb"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{"a", ",", "ar", ",", " ", "arf", ",", " ", "arfp"}], "]"}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"a", "=", 
    RowBox[{"Array", "[", 
     RowBox[{"owenScrambledSobol", ",", "512"}], "]"}]}], ";", " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"32", "/", "8"}], ",", " ", 
     RowBox[{"128", "/", "16"}], ",", " ", 
     RowBox[{"512", "/", "32"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"ar", "=", 
    RowBox[{"RandomSample", "[", "a", "]"}]}], ";", " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"randomize", " ", "sample", " ", "order"}], ",", " ", 
     RowBox[{"ie", " ", "inderx"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"arf", "=", 
    RowBox[{"Flatten", "[", "ar", "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"arfp", "=", 
    RowBox[{"Partition", "[", 
     RowBox[{"arf", ",", "32"}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ArrayPlot", "[", "arfp", "]"}], "\[IndentingNewLine]", 
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"Abs", "[", 
       RowBox[{"RotateLeft", "[", 
        RowBox[{
         RowBox[{"Fourier", "[", 
          RowBox[{"arfp", "-", ".5"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"16", ",", "16"}], "}"}]}], "]"}], "]"}], ",", 
      RowBox[{"ColorFunction", "\[Rule]", "\"\<GrayTones\>\""}]}], "]"}]}]}], 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.8007201219506073`*^9, 3.800720122556313*^9}, {
   3.8149654505352287`*^9, 3.8149654550571337`*^9}, 
   3.8149655780667*^9},ExpressionUUID->"bdbd8fa0-d70b-4039-96c4-cce215653016"],

Cell["\<\

see Perrrier et al. 2018 where from Owen Scrambled Sobol they get to blue \
noise.
also see.. \
https://perso.liris.cnrs.fr/david.coeurjolly/publications/heitz19.html to \
distribute OSS as blue noise\
\>", "Text",
 CellChangeTimes->{{3.800720099795961*^9, 3.800720109527604*^9}, {
  3.815501491973168*^9, 
  3.815501492490738*^9}},ExpressionUUID->"4ff5e0a3-4ad2-4da5-9b9a-\
35d364188226"]
},
WindowSize->{1212, 1367},
WindowMargins->{{490, Automatic}, {0, Automatic}},
FrontEndVersion->"11.2 for Linux x86 (64-bit) (September 10, 2017)",
StyleDefinitions->"DarkThemeCol.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 630, 15, 90, "Text",ExpressionUUID->"1e67ac40-a8f0-470e-8ee6-9683dc9f836b"],
Cell[1191, 37, 5559, 136, 623, "Input",ExpressionUUID->"72d44931-b896-4ff6-afc7-ad069e98c5d6"],
Cell[CellGroupData[{
Cell[6775, 177, 11014, 286, 1589, "Input",ExpressionUUID->"42b7d93c-3f71-4fbd-ab13-61b9eeeaffd7"],
Cell[17792, 465, 721, 13, 50, "Output",ExpressionUUID->"fe1deee9-b286-423c-9fb2-088bbeef36fc"]
}, Open  ]],
Cell[18528, 481, 4382, 110, 347, "Input",ExpressionUUID->"7100e3b9-24cb-4978-8418-e11b3c5cb0eb"],
Cell[22913, 593, 1672, 40, 232, "Input",ExpressionUUID->"bdbd8fa0-d70b-4039-96c4-cce215653016"],
Cell[24588, 635, 400, 11, 75, "Text",ExpressionUUID->"4ff5e0a3-4ad2-4da5-9b9a-35d364188226"]
}
]
*)

