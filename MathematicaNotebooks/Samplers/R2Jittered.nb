(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     22914,        590]
NotebookOptionsPosition[     22287,        572]
NotebookOutlinePosition[     22633,        587]
CellTagsIndexPosition[     22590,        584]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"aux", ":", " ", 
    RowBox[{"type", " ", "punning"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"signedToUnsigned", "[", 
    RowBox[{"x_", ",", " ", 
     RowBox[{"b_:", "32"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"val", "=", "x"}], ",", " ", 
       RowBox[{"bits", "=", "b"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Negative", "[", "val", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nd", "=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"val", ",", "2"}], "]"}]}], ";", 
        "                                                  ", 
        RowBox[{"(*", " ", 
         RowBox[{"truncate", " ", "extra", " ", "digits"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "nd", "]"}], ">", "bits"}], ",", 
          RowBox[{"val", "=", 
           RowBox[{"FromDigits", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"nd", ",", 
               RowBox[{"-", "bits"}]}], "]"}], ",", "2"}], "]"}]}], ",", 
          "val"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"val", "=", 
         RowBox[{"Abs", "[", "val", "]"}]}], ";", 
        "                                                                     \
       ", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"1", "'"}], "s", " ", "complement"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"n", "=", 
         RowBox[{"BitXor", "[", 
          RowBox[{"val", ",", 
           RowBox[{"FromDigits", "[", " ", 
            RowBox[{
             RowBox[{"ConstantArray", "[", 
              RowBox[{"1", ",", "bits"}], "]"}], ",", "2"}], "]"}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"n", "+=", "1"}]}], ",", 
       "                                                                      \
                       ", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"2", "'"}], "s", " ", "complement"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"else", ",", " ", 
         RowBox[{"nothing", " ", "to", " ", "do"}], ",", " ", 
         RowBox[{
         "just", " ", "truncate", " ", "it", " ", "to", " ", "spec", " ", 
          "bits"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nd", "=", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"val", ",", "2"}], "]"}]}], ";", 
        "                                                  ", 
        RowBox[{"(*", " ", 
         RowBox[{"truncate", " ", "extra", " ", "digits"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "nd", "]"}], ">", "bits"}], ",", 
          RowBox[{"val", "=", 
           RowBox[{"FromDigits", "[", 
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"nd", ",", 
               RowBox[{"-", "bits"}]}], "]"}], ",", "2"}], "]"}]}], ",", 
          "val"}], "]"}], ";", "\[IndentingNewLine]", "val"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"realToInt32", "[", "x_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"xx", "=", "x"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"realbits", "=", 
        RowBox[{"IntegerDigits", "[", 
         RowBox[{"xx", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "realbits", "]"}], ">", "32"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"int32bits", "=", 
           RowBox[{"Take", "[", 
            RowBox[{"realbits", ",", 
             RowBox[{"-", "32"}]}], "]"}]}], ";", "  ", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"take", " ", "last", " ", "32", " ", "slots"}], ",", " ", 
            
            RowBox[{"aka", " ", "first", " ", "for", " ", "32", "bits"}]}], 
           " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"int32", "=", 
           RowBox[{"FromDigits", "[", 
            RowBox[{"int32bits", ",", "2"}], "]"}]}], ";", 
          "\[IndentingNewLine]", "int32"}], ",", " ", 
         RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", "xx"}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"convert", " ", "samples", " ", "from", " ", "0"}], "-", 
    RowBox[{"1", " ", "to"}], " ", "-", "1", "-", 
    RowBox[{"+", "1"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"convertSample", "[", "kx_", "]"}], "=", 
   RowBox[{
    RowBox[{"2.0", "*", "kx"}], "-", "1.0"}]}], ";"}]}], "Input",ExpressionUUI\
D->"49233e4b-843b-4519-95e3-40f73db361a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"--", " ", "Jittered"}], " ", "R2", " ", 
    RowBox[{"Sampler", " ", "--"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "r2Phi", ",", "r2Delta0", ",", "r2I0", ",", "r2Alpha0", ",", "r2Alpha1", 
     ",", "r2C0", ",", "r2C1", ",", "r2C2", ",", "r2C3"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Phi", " ", "=", " ", "1.324717957244746"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Delta0", " ", "=", " ", "0.76"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2I0", " ", "=", " ", "0.7"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Alpha0", " ", "=", " ", 
     RowBox[{"1.0", "/", "r2Phi"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Alpha1", " ", "=", " ", 
     RowBox[{
      RowBox[{"1.0", "/", "r2Phi"}], "/", "r2Phi"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2C0", "=", 
     RowBox[{"signedToUnsigned", "[", "1103515245", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2C1", "=", 
     RowBox[{"signedToUnsigned", "[", "1", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2C2", "=", 
     RowBox[{"signedToUnsigned", "[", 
      RowBox[{
       RowBox[{"Interpreter", "[", "\"\<HexInteger\>\"", "]"}], "[", 
       "\"\<ffffffff\>\"", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2C3", "=", 
     RowBox[{"signedToUnsigned", "[", "3", "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"fMod", "[", "kx_Real", "]"}], ":=", 
     RowBox[{"kx", "-", 
      RowBox[{"Floor", "[", "kx", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"hash", " ", "fnc"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"iqHash", "[", 
     RowBox[{"kx_Integer", ",", "ky_Integer"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "=", 
         RowBox[{"signedToUnsigned", "[", "kx", "]"}]}], ",", 
        "\[IndentingNewLine]", 
        "                                                                     \
                ", 
        RowBox[{"y", "=", 
         RowBox[{"signedToUnsigned", "[", "ky", "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"qx", "=", 
        RowBox[{"signedToUnsigned", "[", 
         RowBox[{"r2C0", "*", 
          RowBox[{"BitXor", "[", 
           RowBox[{
            RowBox[{"BitShiftRight", "[", 
             RowBox[{"x", ",", "r2C1"}], "]"}], ",", "x"}], "]"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"qy", "=", 
        RowBox[{"signedToUnsigned", "[", 
         RowBox[{"r2C0", "*", 
          RowBox[{"BitXor", "[", 
           RowBox[{
            RowBox[{"BitShiftRight", "[", 
             RowBox[{"y", ",", "r2C1"}], "]"}], ",", "y"}], "]"}]}], "]"}]}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"n", "=", 
        RowBox[{"signedToUnsigned", "[", 
         RowBox[{"r2C0", "*", 
          RowBox[{"BitXor", "[", 
           RowBox[{"qx", ",", 
            RowBox[{"BitShiftRight", "[", 
             RowBox[{"qy", ",", "r2C3"}], "]"}]}], "]"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"hsh", "=", 
        RowBox[{"n", "*", 
         RowBox[{"(", 
          RowBox[{"1.0", "/", "r2C2"}], ")"}]}]}], ";", "\[IndentingNewLine]",
        "hsh"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "sampler", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Sample", "[", 
     RowBox[{"klambda_Real:", "1.0"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lambda", "=", "klambda"}], "}"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{
       RowBox[{"i", "=", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"1", ",", "100000"}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"u0", "=", 
        RowBox[{"iqHash", "[", 
         RowBox[{"i", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"fMod", "[", 
        RowBox[{
         RowBox[{"r2Alpha0", "*", "i"}], "+", 
         RowBox[{"lambda", "*", "r2Delta0", "*", 
          RowBox[{
           RowBox[{"Sqrt", "[", "Pi", "]"}], " ", "/", " ", 
           RowBox[{"(", 
            RowBox[{"4.0", "*", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"i", "-", "r2I0"}], "]"}]}], ")"}]}], "*", "u0"}]}], 
        "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Sample1D", "[", 
     RowBox[{"ki_Integer", ",", 
      RowBox[{"klambda_Real:", "1.0"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "=", "ki"}], ",", 
        RowBox[{"lambda", "=", "klambda"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"u0", "=", 
        RowBox[{"iqHash", "[", 
         RowBox[{"i", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"r0", "=", 
        RowBox[{"fMod", "[", 
         RowBox[{
          RowBox[{"r2Alpha0", "*", "i"}], "+", 
          RowBox[{"lambda", "*", "r2Delta0", "*", 
           RowBox[{
            RowBox[{"Sqrt", "[", "Pi", "]"}], " ", "/", " ", 
            RowBox[{"(", 
             RowBox[{"4.0", "*", 
              RowBox[{"Sqrt", "[", 
               RowBox[{"i", "-", "r2I0"}], "]"}]}], ")"}]}], "*", "u0"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", "r0"}]}], "\[IndentingNewLine]",
      "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"r2Sample2D", "[", 
     RowBox[{"ki_Integer", ",", 
      RowBox[{"klambda_Real:", "1.0"}]}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"i", "=", "ki"}], ",", 
        RowBox[{"lambda", "=", "klambda"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"u0", "=", 
        RowBox[{"iqHash", "[", 
         RowBox[{"i", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"u1", "=", 
        RowBox[{
         RowBox[{"iqHash", "[", 
          RowBox[{"i", ",", "1"}], "]"}], "-", "0.5"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r0", "=", 
        RowBox[{"fMod", "[", 
         RowBox[{
          RowBox[{"r2Alpha0", "*", "i"}], "+", 
          RowBox[{"lambda", "*", "r2Delta0", "*", 
           RowBox[{
            RowBox[{"Sqrt", "[", "Pi", "]"}], " ", "/", " ", 
            RowBox[{"(", 
             RowBox[{"4.0", "*", 
              RowBox[{"Sqrt", "[", 
               RowBox[{"i", "-", "r2I0"}], "]"}]}], ")"}]}], "*", "u0"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"r1", "=", 
        RowBox[{"fMod", "[", 
         RowBox[{
          RowBox[{"r2Alpha1", "*", "i"}], "+", 
          RowBox[{"lambda", "*", "r2Delta0", "*", 
           RowBox[{
            RowBox[{"Sqrt", "[", "Pi", "]"}], " ", "/", " ", 
            RowBox[{"(", 
             RowBox[{"4.0", "*", 
              RowBox[{"Sqrt", "[", 
               RowBox[{"i", "-", "r2I0"}], "]"}]}], ")"}]}], "*", "u1"}]}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"r0", ",", "r1"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Timing", "[", 
      RowBox[{"r2Sample2D", "[", "12345", "]"}], "]"}], "\[IndentingNewLine]", 
     RowBox[{"Timing", "[", 
      RowBox[{"Array", "[", 
       RowBox[{"r2Sample2D", ",", "10"}], "]"}], "]"}]}], "*)"}]}]}]], "Input",\

 CellChangeTimes->{{3.797080254231555*^9, 3.797080287841168*^9}, {
   3.797335740936466*^9, 3.79733575996441*^9}, {3.7973361577823763`*^9, 
   3.7973361960694313`*^9}, {3.797336321746097*^9, 3.7973363246544037`*^9}, {
   3.797336411675928*^9, 3.797336415635274*^9}, {3.797336514342575*^9, 
   3.797336519700136*^9}, 3.79733665751027*^9, 3.797336707548661*^9, 
   3.79733706297064*^9},ExpressionUUID->"124f10b8-8e3f-4399-887f-\
8ccb8a711c1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"data", ",", "inside", ",", "insidepts"}], "}"}], ",", 
     RowBox[{
      RowBox[{"SeedRandom", "[", "n", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{"RandomReal", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"m", ",", "2"}], "}"}]}], "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"p", "=", 
       RowBox[{"hashInt2D", "[", 
        RowBox[{"10", ",", "10"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"rdata", "=", 
       RowBox[{"Array", "[", 
        RowBox[{"r2Sample2D", ",", "m"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"data", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"convertSample", ",", "rdata"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"data", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"convertSample", ",", 
           RowBox[{"Array", "[", " ", 
            RowBox[{"cmjSampler2D", ",", "m"}], "]"}]}], "]"}]}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"insidepts", "=", 
       RowBox[{"Cases", "[", 
        RowBox[{"data", ",", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x_", ",", "y_"}], "}"}], "/;", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "^", "2"}], "+", 
            RowBox[{"y", "^", "2"}]}], "<", "1"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"inside", "=", 
       RowBox[{"Length", "[", "insidepts", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Text", "@", 
       RowBox[{"Style", "[", 
        RowBox[{
         RowBox[{"Column", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Graphics", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"PointSize", "[", "0.006", "]"}], ",", 
                RowBox[{"RGBColor", "[", 
                 RowBox[{"0.86", ",", "0.5", ",", "0.74"}], "]"}], ",", 
                RowBox[{"Disk", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "0"}], "}"}], ",", "1"}], "]"}], ",", 
                "Black", ",", 
                RowBox[{"Point", "[", "data", "]"}]}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"If", "[", 
                RowBox[{"format", ",", "500", ",", "350"}], "]"}]}]}], "]"}], 
            ",", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<inside: \>\"", ",", "inside", ",", "\"\<\\toutside: \>\"", 
               ",", 
               RowBox[{"m", "-", "inside"}], ",", "\"\<\\ttotal:  \>\"", ",", 
               "m"}], "}"}], "]"}], ",", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\[Pi] \[TildeTilde] 4 \[Times] \>\"", ",", "inside", ",", 
               "\"\</\>\"", ",", "m", ",", "\"\< = \>\"", ",", 
               RowBox[{"4.", " ", 
                RowBox[{"inside", "/", "m"}]}]}], "}"}], "]"}]}], "}"}], 
          "]"}], ",", "\"\<Label\>\""}], "]"}]}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "\"\<random seed\>\""}], "}"}], ",", "1", 
     ",", "1000", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m", ",", "64", ",", "\"\<sample size\>\""}], "}"}], ",", "64", 
     ",", "8192", ",", "64", ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"format", ",", "False", ",", "\"\<large format\>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False"}], "}"}]}], "}"}], ",", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.797184822822145*^9, 3.797184828216445*^9}, 
   3.797184878351161*^9, {3.797336850332197*^9, 3.7973369133700438`*^9}, {
   3.7973369817067432`*^9, 3.797336982667357*^9}, {3.797337022185582*^9, 
   3.797337024633354*^9}},ExpressionUUID->"4766f963-bfb8-4a70-b3f2-\
8a7afc14de6c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`format$$ = False, $CellContext`m$$ = 
    512, $CellContext`n$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`n$$], 1, "random seed"}, 1, 1000, 1}, {{
       Hold[$CellContext`m$$], 64, "sample size"}, 64, 8192, 64}, {{
       Hold[$CellContext`format$$], False, "large format"}, {True, False}}}, 
    Typeset`size$$ = {350., {188., 191.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`n$2320718$$ = 0, $CellContext`m$2320719$$ = 
    0, $CellContext`format$2320720$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`format$$ = False, $CellContext`m$$ = 
        64, $CellContext`n$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`n$$, $CellContext`n$2320718$$, 0], 
        Hold[$CellContext`m$$, $CellContext`m$2320719$$, 0], 
        Hold[$CellContext`format$$, $CellContext`format$2320720$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`data$, $CellContext`inside$, \
$CellContext`insidepts$}, 
        SeedRandom[$CellContext`n$$]; $CellContext`p = $CellContext`hashInt2D[
          10, 10]; $CellContext`rdata = 
         Array[$CellContext`r2Sample2D, $CellContext`m$$]; $CellContext`data$ = 
         Map[$CellContext`convertSample, $CellContext`rdata]; \
$CellContext`insidepts$ = Cases[$CellContext`data$, 
           Condition[{
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`y, 
              Blank[]]}, $CellContext`x^2 + $CellContext`y^2 < 
            1]]; $CellContext`inside$ = Length[$CellContext`insidepts$]; 
        Text[
          Style[
           Column[{
             Graphics[{
               PointSize[0.006], 
               RGBColor[0.86, 0.5, 0.74], 
               Disk[{0, 0}, 1], Black, 
               Point[$CellContext`data$]}, ImageSize -> 
              If[$CellContext`format$$, 500, 350]], 
             
             Row[{"inside: ", $CellContext`inside$, 
               "\toutside: ", $CellContext`m$$ - $CellContext`inside$, 
               "\ttotal:  ", $CellContext`m$$}], 
             
             Row[{"\[Pi] \[TildeTilde] 4 \[Times] ", $CellContext`inside$, 
               "/", $CellContext`m$$, " = ", 
               4. ($CellContext`inside$/$CellContext`m$$)}]}], "Label"]]], 
      "Specifications" :> {{{$CellContext`n$$, 1, "random seed"}, 1, 1000, 
         1}, {{$CellContext`m$$, 64, "sample size"}, 64, 8192, 64, Appearance -> 
         "Labeled"}, {{$CellContext`format$$, False, "large format"}, {
         True, False}}}, "Options" :> {AutorunSequencing -> {1, 2}}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{395., {254., 258.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.800720663245245*^9, 
  3.8007207468156233`*^9},ExpressionUUID->"4ec837e7-ffae-4c8c-bb27-\
2d81f7dd11c5"]
}, Open  ]]
},
WindowSize->{1207, 1365},
WindowMargins->{{Automatic, 156}, {0, Automatic}},
FrontEndVersion->"11.2 for Linux x86 (64-bit) (September 10, 2017)",
StyleDefinitions->"DarkThemeCol.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 5266, 134, 623, "Input",ExpressionUUID->"49233e4b-843b-4519-95e3-40f73db361a3"],
Cell[5827, 156, 8232, 217, 1037, "Input",ExpressionUUID->"124f10b8-8e3f-4399-887f-8ccb8a711c1f"],
Cell[CellGroupData[{
Cell[14084, 377, 4460, 115, 370, "Input",ExpressionUUID->"4766f963-bfb8-4a70-b3f2-8a7afc14de6c"],
Cell[18547, 494, 3724, 75, 547, "Output",ExpressionUUID->"4ec837e7-ffae-4c8c-bb27-2d81f7dd11c5"]
}, Open  ]]
}
]
*)

